@model CustomerNavigationModel
@inject Nop.Services.Helpers.IUserAgentHelper userAgent

@if (userAgent.IsMobileDevice())
{
    <div class="settings-wrapper py-3">

        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.AccountNavigationBefore })
        @foreach (var item in Model.CustomerNavigationItems)
        {
            <div class="card settings-card">
                <div class="card-body">
                    <div class="single-settings d-flex align-items-center justify-content-between">
                        <div class="title"><i class="lni lni-user"></i><span>@(item.Title)</span></div>
                        <div class="data-content"><a href="@Url.RouteUrl(item.RouteName)">View/Edit<i class="lni lni-chevron-right"></i></a></div>
                    </div>
                </div>
            </div>
        }
        @if (Context.User.Identity.IsAuthenticated)
        {
            <div class="card settings-card">
                <div class="card-body">
                    <div class="single-settings d-flex align-items-center justify-content-between">
                        <div class="title"><i class="lni lni-lock"></i><span>Signout</span></div>
                        <div class="data-content">
                            <a href="@Url.RouteUrl("Logout")">
                                @T("Account.Logout")
                                <i class="lni lni-chevron-right"></i>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        }


    </div>

}
else
{

    <div class="block block-account-navigation">
        <div class="title">
            <strong>@T("Account.Navigation")</strong>
        </div>
        <div class="listbox">
            <ul class="list">
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.AccountNavigationBefore })
                @foreach (var item in Model.CustomerNavigationItems)
                {
                    <li class="@item.ItemClass @(Model.SelectedTab == item.Tab ? "active" : "inactive")">
                        <a href="@Url.RouteUrl(item.RouteName)">@(item.Title)</a>

                    </li>
                }
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.AccountNavigationAfter })
            </ul>
        </div>
    </div>
}
