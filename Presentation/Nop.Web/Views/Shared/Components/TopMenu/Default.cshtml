
@model TopMenuModel


<nav class="main-nav">
    <ul class="menu menu-active-underline">

        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderMenuBefore })
        @if (Model.DisplayHomepageMenuItem)
        {
            <li class="submenu"><a href="@Url.RouteUrl("Homepage")">@T("Homepage")</a></li>
        }

        @if (!Model.UseAjaxMenu)
        {
            var rootCategories = Model.Categories.Where(x => x.IncludeInTopMenu).ToList();
            @foreach (var category in rootCategories)
            {
                var lineModel = new TopMenuModel.CategoryLineModel
                {
                    Category = category

                };
                <li class="submenu">

                    <a href="@Url.RouteUrl("Category", new { SeName = lineModel.Category.SeName })">
                        @lineModel.Category.Name
                        @if (lineModel.Category.NumberOfProducts.HasValue)
                        {
                            <text> </text>@T("Categories.TotalProducts", lineModel.Category.NumberOfProducts.Value)
                        }
                    </a>
                    @{
                        //subcategories
                        var subCategories = lineModel.ResponsiveMobileMenu ?
                            //responsive (all categories)
                            lineModel.Category.SubCategories :
                            //standard design (only categories with "IncludeInTopMenu")
                            lineModel.Category.SubCategories.Where(x => x.IncludeInTopMenu).ToList();


                        if (subCategories.Count > 0)
                        {
                            <div class="megamenu">
                                <div class="row">

                                    @foreach (var subCategory in subCategories)
                                    {

                                        var categoryLineModel = new TopMenuModel.CategoryLineModel
                                        {
                                            Category = subCategory,
                                            Level = lineModel.Level + 1,
                                            ResponsiveMobileMenu = lineModel.ResponsiveMobileMenu
                                        };
                                        var subsubCategories = categoryLineModel.ResponsiveMobileMenu ?
                                                 //responsive (all categories)
                                                 categoryLineModel.Category.SubCategories :
                                                 //standard design (only categories with "IncludeInTopMenu")
                                                 categoryLineModel.Category.SubCategories.Where(x => x.IncludeInTopMenu).ToList();
                                        <div class="col-6 col-sm-2 col-md-2 col-lg-2">

                                            <h4 class="menu-title"><a href="@Url.RouteUrl("Category", new { SeName = categoryLineModel.Category.SeName })"> @categoryLineModel.Category.Name</a></h4>

                                            <ul>
                                                @foreach (var subsubCategory in subsubCategories)
                                                {
                                                    var subCategoryLineModel = new TopMenuModel.CategoryLineModel
                                                    {
                                                        Category = subsubCategory,
                                                        Level = categoryLineModel.Level + 1,
                                                        ResponsiveMobileMenu = categoryLineModel.ResponsiveMobileMenu
                                                    };


                                                    <li><a href="@Url.RouteUrl("Category", new { SeName = subCategoryLineModel.Category.SeName })">@subCategoryLineModel.Category.Name</a></li>


                                                }
                                            </ul>
                                            <hr />
                                        </div>

                                    }

                                </div>
                            </div>


                        }
                    }
                </li>
            }

        }
        @foreach (var topic in Model.Topics)
        {
            <li class="submenu"><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
        }
        @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenuItem)
        {
            <li class="submenu"><a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
        }
        @if (Model.DisplayProductSearchMenuItem)
        {
            <li class="submenu"><a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a></li>
        }
        @if (Model.DisplayCustomerInfoMenuItem)
        {
            <li class="submenu"><a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
        }
        @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
        {
            <li class="submenu"><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
        }
        @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
        {
            <li class="submenu"><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
        }
        @if (Model.DisplayContactUsMenuItem)
        {
            <li class="submenu"><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderMenuAfter })
    </ul>
</nav>
@{var rootCategoriesResponsive = Model.Categories.ToList();
    //name it "Categories" if we have only categories. Otherwise, "Menu"
    var responsiveMenuTitle = Model.HasOnlyCategories ? T("Categories") : T("Menu");
}


    

