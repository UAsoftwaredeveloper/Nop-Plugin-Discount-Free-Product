@model ProductDetailsModel
@using Nop.Core.Domain.Seo;
@using Nop.Core.Domain.Orders
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@inject Nop.Services.Helpers.IUserAgentHelper userAgent
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-product-details-page");

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, webHelper.GetCurrentRequestProtocol()).ToLowerInvariant();
        Html.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image:url\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
    }
    var dataDictAttributes = new ViewDataDictionary(ViewData);
    dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{Model.Id}";
    var dataDictGiftCard = new ViewDataDictionary(ViewData);
    dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{Model.Id}";
    var dataDictRental = new ViewDataDictionary(ViewData);
    dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{Model.Id}";
    var dataDictPrice = new ViewDataDictionary(ViewData);
    dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{Model.Id}";
    var dataDictAddToCart = new ViewDataDictionary(ViewData);
    dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
    var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
    dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
}
<!--product breadcrumb-->
@section Breadcrumb
{
    @await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
}

@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsAfterBreadcrumb, additionalData = Model })
@if (userAgent.IsMobileDevice())
{

    <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
        <div data-productid="@Model.Id">
            @if (seoSettings.MicrodataEnabled)
            {
                @await Html.PartialAsync("_Microdata", Model)
            }
            @await Html.PartialAsync("_ProductDetailsPicturesMobile", Model)

            <div class="product-description pb-3">
                @await Html.PartialAsync("_Discontinued", Model)

                <div class="product-title-meta-data bg-white mb-3 py-3">
                    <div class="container d-flex justify-content-between">
                        <div class="p-title-price">
                            <h6 class="mb-1">@Model.Name</h6>
                            <!--availability-->
                            @await Html.PartialAsync("_Availability", Model)
                            @if (!string.IsNullOrEmpty(Model.ShortDescription))
                            {
                                <div class="p-specification bg-white mb-3 py-3">
                                    <div class="container">

                                        @Html.Raw(Model.ShortDescription)
                                    </div>
                                </div>
                            }

                            <p class="sale-price mb-0">&#8377;@Model.ProductPrice.PriceValue<span>@Model.ProductPrice.OldPrice</span></p>
                        </div>
                        <div class="p-wishlist-share">
                            <a href="javascript:void(0);" id="add-to-wishlist-button-@Model.Id" data-productid="@Model.Id" onclick="AjaxCart.addproducttocart_details('@Url.RouteUrl("AddProductToCart-Details", new {productId = Model.Id, shoppingCartTypeId = (int) ShoppingCartType.Wishlist})', '#product-details-form');return false;">
                                <i class="lni lni-heart"></i>
                            </a>
                        </div>
                    </div>
                    @await Html.PartialAsync("_ProductReviewOverviewMobile", Model.ProductReviewOverview)
                </div>
                @await Html.PartialAsync("_ProductManufacturersMobile", Model.ProductManufacturers)

                <!--SKU, MAN, GTIN, vendor-->
                @await Html.PartialAsync("_SKU_Man_GTIN_VenMobile", Model)
                <!--delivery-->
                @await Html.PartialAsync("_DeliveryInfo", Model)
                <!--sample download-->
                @await Html.PartialAsync("_DownloadSample", Model)
                @await Html.PartialAsync("_ProductAttributeMobile", Model, dataDictAttributes)
                @await Html.PartialAsync("_AddToCartMobile", Model.AddToCart, dataDictAddToCart)


                <div class="p-specification bg-white mb-3 py-3">
                    <div class="container">
                        <h6>Full Description</h6>
                        @Html.Raw(Model.ShortDescription)
                    </div>
                </div>

                <div class="pb-3"></div>

                @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })
                @await Html.PartialAsync("CustomerProductReviewsMobile",new Nop.Web.Models.Catalog.CustomerProductReviewsModel())



            </div>
        </div>
    </form>
}
else
{

    <div class="page product-details-page">
        <div class="page-body">
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsTop, additionalData = Model })
            <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
                @if (seoSettings.MicrodataEnabled)
                {
                    @await Html.PartialAsync("_Microdata", Model)
                }
                <div data-productid="@Model.Id">
                    <div class="product-essential">
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsEssentialTop, additionalData = Model })
                        <!--product pictures-->
                        @await Html.PartialAsync("_ProductDetailsPictures", Model)
                        <div class="overview">
                            @await Html.PartialAsync("_Discontinued", Model)
                            <div class="product-name">
                                <h1>
                                    @Model.Name
                                </h1>
                            </div>
                            @if (!string.IsNullOrEmpty(Model.ShortDescription))
                            {
                                <div class="short-description">
                                    @Html.Raw(Model.ShortDescription)
                                </div>
                            }
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewTop, additionalData = Model })
                            <!--product reviews-->
                            @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)
                            <!--manufacturers-->
                            @await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers)
                            <!--availability-->
                            @await Html.PartialAsync("_Availability", Model)
                            <!--SKU, MAN, GTIN, vendor-->
                            @await Html.PartialAsync("_SKU_Man_GTIN_Ven", Model)
                            <!--delivery-->
                            @await Html.PartialAsync("_DeliveryInfo", Model)
                            <!--sample download-->
                            @await Html.PartialAsync("_DownloadSample", Model)
                            <!--attributes-->
                            @{

                                @await Html.PartialAsync("_ProductAttributes", Model, dataDictAttributes)
                            }
                            <!--gift card-->
                            @{

                                @await Html.PartialAsync("_GiftCardInfo", Model.GiftCard, dataDictGiftCard)
                            }
                            <!--rental info-->
                            @{
                                
                                @await Html.PartialAsync("_RentalInfo", Model, dataDictRental)
                            }
                            <!--price & add to cart & estimate shipping-->
                            @{
                                @await Html.PartialAsync("_ProductPrice", Model.ProductPrice, dataDictPrice)

                                @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)

                                @await Html.PartialAsync("_AddToCart", Model.AddToCart, dataDictAddToCart)

                                @await Html.PartialAsync("_ProductEstimateShipping", Model.ProductEstimateShipping)
                            }
                            <!--wishlist, compare, email a friend-->
                            <div class="overview-buttons">
                                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsBefore, additionalData = Model })
                                @{
                                    @await Html.PartialAsync("_AddToWishlist", Model.AddToCart, dataDictAddToWishlist)
                                }
                                @await Html.PartialAsync("_CompareProductsButton", Model)
                                @await Html.PartialAsync("_ProductEmailAFriendButton", Model)
                                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsAfter, additionalData = Model })
                            </div>
                            @await Html.PartialAsync("_ShareButton", Model)
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewBottom, additionalData = Model })
                        </div>
                        @if (!string.IsNullOrEmpty(Model.FullDescription))
                        {
                            <div class="full-description">
                                @Html.Raw(Model.FullDescription)
                            </div>
                        }
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsEssentialBottom, additionalData = Model })
                    </div>
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBeforeCollateral, additionalData = Model })
                    <div class="product-collateral">
                        @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecificationModel)
                        @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                    </div>
                    @await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })
                    @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })
                </div>
            </form>
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBottom, additionalData = Model })
        </div>
    </div>
}
